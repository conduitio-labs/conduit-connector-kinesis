// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package source

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigAwsAccessKeyId     = "aws.accessKeyId"
	ConfigAwsRegion          = "aws.region"
	ConfigAwsSecretAccessKey = "aws.secretAccessKey"
	ConfigAwsUrl             = "aws.url"
	ConfigStartFromLatest    = "startFromLatest"
	ConfigStreamName         = "streamName"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigAwsAccessKeyId: {
			Default:     "",
			Description: "AWSAccessKeyID is the amazon access key id",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigAwsRegion: {
			Default:     "",
			Description: "AWSRegion is the region where the stream is hosted",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigAwsSecretAccessKey: {
			Default:     "",
			Description: "AWSSecretAccessKey is the amazon secret access key",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigAwsUrl: {
			Default:     "",
			Description: "AWSURL is the URL for endpoint override - testing/dry-run only",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigStartFromLatest: {
			Default:     "",
			Description: "startFromLatest defaults to false. When true, sets the iterator type to\nLATEST (iterates from the point that the connection begins = CDC). when false, sets the iterator type\nto TRIM_HORIZON (iterates from the oldest record in the shard = snapshot). Iterators eventually\nshift to latest after snapshot has been written",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigStreamName: {
			Default:     "",
			Description: "StreamName is the name of the Kinesis Data Stream.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
